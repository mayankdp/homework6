Main: Beginning execution
Main: logfile 'yfiblog.txt
BINARY LENGTH, WORDCOUNT 112 56
 READ ITEM  0:   -24553 ffffa017 1010000000010111
 READ ITEM  1:   -32741 ffff801b 1000000000011011
 READ ITEM  2:    16411 0000401b 0100000000011011
 READ ITEM  3:   -24551 ffffa019 1010000000011001
 READ ITEM  4:    16410 0000401a 0100000000011010
 READ ITEM  5:   -24551 ffffa019 1010000000011001
 READ ITEM  6:   -32744 ffff8018 1000000000011000
 READ ITEM  7:    -8189 ffffe003 1110000000000011
 READ ITEM  8:    20507 0000501b 0101000000011011
 READ ITEM  9:   -20453 ffffb01b 1011000000011011
 READ ITEM 10:    16409 00004019 0100000000011001
 READ ITEM 11:   -24550 ffffa01a 1010000000011010
 READ ITEM 12:    16408 00004018 0100000000011000
 READ ITEM 13:   -24553 ffffa017 1010000000010111
 READ ITEM 14:   -32746 ffff8016 1000000000010110
 READ ITEM 15:    16407 00004017 0100000000010111
 READ ITEM 16:   -24549 ffffa01b 1010000000011011
 READ ITEM 17:   -32746 ffff8016 1000000000010110
 READ ITEM 18:    16411 0000401b 0100000000011011
 READ ITEM 19:   -24553 ffffa017 1010000000010111
 READ ITEM 20:        3 00000003 0000000000000011
 READ ITEM 21:    -8190 ffffe002 1110000000000010
 READ ITEM 22:        1 00000001 0000000000000001
 READ ITEM 23:       -5 fffffffb 1111111111111011
 READ ITEM 24:        8 00000008 0000000000001000
 READ ITEM 25:       13 0000000d 0000000000001101
 READ ITEM 26:    -4096 fffff000 1111000000000000
 READ ITEM 27:       40 00000028 0000000000101000
 READ ITEM 28:      -52 ffffffcc 1111111111001100
 READ ITEM 29:      -52 ffffffcc 1111111111001100
 READ ITEM 30:      -52 ffffffcc 1111111111001100
 READ ITEM 31:      -52 ffffffcc 1111111111001100
 READ ITEM 32:      -52 ffffffcc 1111111111001100
 READ ITEM 33:      -52 ffffffcc 1111111111001100
 READ ITEM 34:      -52 ffffffcc 1111111111001100
 READ ITEM 35:      -52 ffffffcc 1111111111001100
 READ ITEM 36:      -52 ffffffcc 1111111111001100
 READ ITEM 37:      -52 ffffffcc 1111111111001100
 READ ITEM 38:      -52 ffffffcc 1111111111001100
 READ ITEM 39:      -52 ffffffcc 1111111111001100
 READ ITEM 40:    -4096 fffff000 1111000000000000
 READ ITEM 41:      -52 ffffffcc 1111111111001100
 READ ITEM 42:      -52 ffffffcc 1111111111001100
 READ ITEM 43:      -52 ffffffcc 1111111111001100
 READ ITEM 44:      -52 ffffffcc 1111111111001100
 READ ITEM 45:      -52 ffffffcc 1111111111001100
 READ ITEM 46:      -52 ffffffcc 1111111111001100
 READ ITEM 47:      -52 ffffffcc 1111111111001100
 READ ITEM 48:      -52 ffffffcc 1111111111001100
 READ ITEM 49:      -52 ffffffcc 1111111111001100
 READ ITEM 50:      -52 ffffffcc 1111111111001100
 READ ITEM 51:      -52 ffffffcc 1111111111001100
 READ ITEM 52:      -52 ffffffcc 1111111111001100
 READ ITEM 53:      -52 ffffffcc 1111111111001100
 READ ITEM 54:      -52 ffffffcc 1111111111001100
 READ ITEM 55:      -52 ffffffcc 1111111111001100
PASS ONE
    0                                           *23 567 9 123 56789 1
    1                                           *ll mmm a sss hhhhh * comment
    2    0  000000000000 1100 1100 1100 1100        LD    IDX ..... * load ACC with value at IDX
    3    1  000000000001 1100 1100 1100 1100        ADD   STO       * add loop value to initial address
    4    2  000000000010 1100 1100 1100 1100        STC   STO ..... * store that address at STO
    5                                           *                    
    6    3  000000000011 1100 1100 1100 1100 TOP    LD    BB1 ..... * load ACC with value at BB1
    7    4  000000000100 1100 1100 1100 1100        STC   TMP ..... * store that value at TMP
    8    5  000000000101 1100 1100 1100 1100        LD    BB1 ..... * reload ACC with value at BB1
    9    6  000000000110 1100 1100 1100 1100        ADD   AA1 ..... * add in value at AA1
   10    7  000000000111 1100 1100 1100 1100        WRT       ..... * write the new Fib number
   11    8  000000001000 1100 1100 1100 1100        STC * STO ..... * store ACC where STO is pointing to
   12    9  000000001001 1100 1100 1100 1100        LD  * STO ..... * load ACC from where STO is pointing to
   13   10  000000001010 1100 1100 1100 1100        STC   BB1 ..... * store ACC where STO is pointing to
   14   11  000000001011 1100 1100 1100 1100        LD    TMP ..... * load the old BB1 from TMP
   15   12  000000001100 1100 1100 1100 1100        STC   AA1 ..... * store ACC where STO is pointing to
   16                                           *                    
   17   13  000000001101 1100 1100 1100 1100        LD    IDX ..... * reload ACC with the counter
   18   14  000000001110 1100 1100 1100 1100        ADD   ONE ..... * increment counter
   19   15  000000001111 1100 1100 1100 1100        STC   IDX ..... * store this new address at STO
   20   16  000000010000 1100 1100 1100 1100        LD    STO ..... * load our pointer
   21   17  000000010001 1100 1100 1100 1100        ADD   ONE ..... * increment by one
   22   18  000000010010 1100 1100 1100 1100        STC   STO ..... * store it back
   23   19  000000010011 1100 1100 1100 1100        LD    IDX ..... * reload ACC with the counter
   24   20  000000010100 1100 1100 1100 1100        BAN   TOP ..... * loop until done
   25   21  000000010101 1100 1100 1100 1100        STP       ..... 
   26                                           *                    
   27   22  000000010110 1100 1100 1100 1100 ONE    HEX       +0001 * we need a constant 1
   28   23  000000010111 1100 1100 1100 1100 IDX    HEX       ..... * loop index
   29   24  000000011000 1100 1100 1100 1100 AA1    HEX       ..... * smaller of two values to add 
   30   25  000000011001 1100 1100 1100 1100 BB1    HEX       ..... * larger of two values to add
   31   26  000000011010 1100 1100 1100 1100 TMP    DS        ..... * temp storage
   32   27  000000011011 1100 1100 1100 1100 STO    HEX       ..... * address in SSS at which to store
   33   28  000000011100 1100 1100 1100 1100        ORG       ..... * set PC location for SSS at +0020 
   34   29  000000011101 1100 1100 1100 1100 SSS    DS        ..... 
   35   30  000000011110 1100 1100 1100 1100        END       ..... 

SYMBOL TABLE
    SYM LOC FLAGS
SYM AA1  24
SYM BB1  25
SYM IDX  23
SYM ONE  22
SYM SSS  40
SYM STO  27
SYM TMP  26
SYM TOP   3

PASS TWO
    0                                           *23 567 9 123 56789 1
    1                                           *ll mmm a sss hhhhh * comment
    2    0  000000000000 1010 0000 0001 0111        LD    IDX ..... * load ACC with value at IDX
    3    1  000000000001 1000 0000 0001 1011        ADD   STO       * add loop value to initial address
    4    2  000000000010 0100 0000 0001 1011        STC   STO ..... * store that address at STO
    5                                           *                    
    6    3  000000000011 1010 0000 0001 1001 TOP    LD    BB1 ..... * load ACC with value at BB1
    7    4  000000000100 0100 0000 0001 1010        STC   TMP ..... * store that value at TMP
    8    5  000000000101 1010 0000 0001 1001        LD    BB1 ..... * reload ACC with value at BB1
    9    6  000000000110 1000 0000 0001 1000        ADD   AA1 ..... * add in value at AA1
   10    7  000000000111 1110 0000 0000 0011        WRT       ..... * write the new Fib number
   11    8  000000001000 0101 0000 0001 1011        STC * STO ..... * store ACC where STO is pointing to
   12    9  000000001001 1011 0000 0001 1011        LD  * STO ..... * load ACC from where STO is pointing to
   13   10  000000001010 0100 0000 0001 1001        STC   BB1 ..... * store ACC where STO is pointing to
   14   11  000000001011 1010 0000 0001 1010        LD    TMP ..... * load the old BB1 from TMP
   15   12  000000001100 0100 0000 0001 1000        STC   AA1 ..... * store ACC where STO is pointing to
   16                                           *                    
   17   13  000000001101 1010 0000 0001 0111        LD    IDX ..... * reload ACC with the counter
   18   14  000000001110 1000 0000 0001 0110        ADD   ONE ..... * increment counter
   19   15  000000001111 0100 0000 0001 0111        STC   IDX ..... * store this new address at STO
   20   16  000000010000 1010 0000 0001 1011        LD    STO ..... * load our pointer
   21   17  000000010001 1000 0000 0001 0110        ADD   ONE ..... * increment by one
   22   18  000000010010 0100 0000 0001 1011        STC   STO ..... * store it back
   23   19  000000010011 1010 0000 0001 0111        LD    IDX ..... * reload ACC with the counter
   24   20  000000010100 0000 0000 0000 0011        BAN   TOP ..... * loop until done
   25   21  000000010101 1110 0000 0000 0010        STP       ..... 
   26                                           *                    
   27   22  000000010110 1110 0000 0000 0010 ONE    HEX       +0001 * we need a constant 1
   28   23  000000010111 1110 0000 0000 0010 IDX    HEX       ..... * loop index
   29   24  000000011000 1110 0000 0000 0010 AA1    HEX       ..... * smaller of two values to add 
   30   25  000000011001 1110 0000 0000 0010 BB1    HEX       ..... * larger of two values to add
   31   26  000000011010 1110 0000 0000 0010 TMP    DS        ..... * temp storage
   32   27  000000011011 1110 0000 0000 0010 STO    HEX       ..... * address in SSS at which to store
   33   28  000000011100 1110 0000 0000 0010        ORG       ..... * set PC location for SSS at +0020 
   34   29  000000011101 1110 0000 0000 0010 SSS    DS        ..... 
   35   30  000000011110 1110 0000 0000 0010        END       ..... 

Main: Ending execution
